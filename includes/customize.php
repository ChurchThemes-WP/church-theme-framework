<?php/** * Theme Customizer * * Helper functions for theme customizer use. *//** * Customization Option ID * * Used for storing and getting customizer option values from a master array. * The option name is based on the parent theme's name. * Settings API used instead of theme mod for greater flexibility. */function ctfw_customize_option_id() {	$option_id = CTFW_THEME_SLUG . '_customizations'; // unique to parent theme	return apply_filters( 'ctfw_customize_option_id', $option_id ); // prefix with theme name so options are unique to theme}/** * Get Customization Value * * This gets a customization value for convenient use in templates, etc. */function ctfw_customization( $option ) {	$value = '';	// Get options array to pull value from	$options = get_option( ctfw_customize_option_id() );		// Get default value	$defaults = ctfw_customize_defaults();	$default = isset( $defaults[$option]['value'] ) ? $defaults[$option]['value'] : '';	// Option not saved - use default value	if ( ! isset( $options[$option] ) ) {		$value = $default;	}		// Option has been saved	else {				// Value is empty when not allowed, use default		if ( empty( $options[$option] ) && ! empty( $defaults[$option]['no_empty'] ) ) {			$value = $default;		}				// Otherwise, stick with current value		else {			$value = $options[$option];		}	}	// Return filtered	return apply_filters( 'ctfw_customization', $value, $option );	}/** * Get Defaults * * Theme make array of defaults available to framework via ctfw_customize_defaults filter. * This way they can be accessed via this function from anywhere. */function ctfw_customize_defaults() {	return apply_filters( 'ctfw_customize_defaults', array() );}